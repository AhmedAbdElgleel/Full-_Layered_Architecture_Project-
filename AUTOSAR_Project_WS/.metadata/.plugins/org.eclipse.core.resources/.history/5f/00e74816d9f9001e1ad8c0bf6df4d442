 /******************************************************************************
 *
 * Module: Gpt
 *
 * File Name: Gpt.h
 *
 * Description: Header file for TM4C123GH6PM Microcontroller - SysTick Timer Driver.
 *
 * Author: Ahmed AbdElgleel
 ******************************************************************************/
#ifndef GPT_H_
#define GPT_H_

/* Id for the company in the AUTOSAR
 * for example EDGES = 1000 */
#define GPT_VENDOR_ID    (1000U)

/* Gpt Module Id */
#define GPT_MODULE_ID    (100U)

/* Gpt Instance Id */
#define GPT_INSTANCE_ID  (0U)

/*
 * Module Version 1.0.0
 */
#define GPT_SW_MAJOR_VERSION           (1U)
#define GPT_SW_MINOR_VERSION           (0U)
#define GPT_SW_PATCH_VERSION           (0U)

/*
 * AUTOSAR Version 4.0.3
 */
#define GPT_AR_RELEASE_MAJOR_VERSION   (4U)
#define GPT_AR_RELEASE_MINOR_VERSION   (0U)
#define GPT_AR_RELEASE_PATCH_VERSION   (3U)

/*
 * Macros for Gpt Status
 */
#define GPT_INITIALIZED                (1U)
#define GPT_NOT_INITIALIZED            (0U)

/* Standard AUTOSAR types */
#include "Std_Types.h"

/* AUTOSAR checking between Std Types and Gpt Modules */
#if ((STD_TYPES_AR_RELEASE_MAJOR_VERSION != GPT_AR_RELEASE_MAJOR_VERSION)\
 ||  (STD_TYPES_AR_RELEASE_MINOR_VERSION != GPT_AR_RELEASE_MINOR_VERSION)\
 ||  (STD_TYPES_AR_RELEASE_PATCH_VERSION != GPT_AR_RELEASE_PATCH_VERSION))
  #error "The AR version of Std_Types.h does not match the expected version"
#endif

/* Gpt Pre-Compile Configuration Header file */
#include "Gpt_Cfg.h"

/* AUTOSAR Version checking between Gpt_Cfg.h and Gpt.h files */
#if ((GPT_CFG_AR_RELEASE_MAJOR_VERSION != GPT_AR_RELEASE_MAJOR_VERSION)\
 ||  (GPT_CFG_AR_RELEASE_MINOR_VERSION != GPT_AR_RELEASE_MINOR_VERSION)\
 ||  (GPT_CFG_AR_RELEASE_PATCH_VERSION != GPT_AR_RELEASE_PATCH_VERSION))
  #error "The AR version of Gpt_Cfg.h does not match the expected version"
#endif

/* Software Version checking between Gpt_Cfg.h and Gpt.h files */
#if ((GPT_CFG_SW_MAJOR_VERSION != GPT_SW_MAJOR_VERSION)\
 ||  (GPT_CFG_SW_MINOR_VERSION != GPT_SW_MINOR_VERSION)\
 ||  (GPT_CFG_SW_PATCH_VERSION != GPT_SW_PATCH_VERSION))
  #error "The SW version of Gpt_Cfg.h does not match the expected version"
#endif

/* Non AUTOSAR files */
#include "Common_Macros.h"

/******************************************************************************
 *                      API Service Id Macros                                 *
******************************************************************************/
/* Service ID for return version of the GPT Driver. */
#define Gpt_GetVersionInfo_SID          (uint8)0x00

/* Service ID for Initializes the hardware timer module (GPT Driver) . */
#define Gpt_Init_SID                    (uint8)0x01

/* Service ID for Deinitializes all hardware timer channels. */
#define Gpt_DeInit_SID                  (uint8)0x02

/* Service ID for Returns the time already elapsed.  */
#define Gpt_GetTimeElapsed_SID          (uint8)0x03

/* Service ID for Returns the time remaining until the target time is reached.  */
#define Gpt_GetTimeRemaining_SID        (uint8)0x04

/* Service ID for starting the timer channel. */
#define Gpt_StartTimer_SID              (uint8)0x05

/* Service ID for stopping the timer channel. */
#define Gpt_StopTimer_SID               (uint8)0x06

/* Service ID for Enables the interrupt notification for a channel (relevant in normal mode). */
#define Gpt_EnableNotification_SID      (uint8)0x07

/* Service ID for Disables the interrupt notification for a channel (relevant in normal mode). */
#define Gpt_DisableNotification_SID     (uint8)0x08

/* Service ID for Sets the operation mode of the GPT. */
#define Gpt_SetMode_SID                 (uint8)0x09

/* Service ID for Disables the wakeup interrupt of a channel (relevant in sleep mode). */
#define Gpt_DisableWakeup_SID           (uint8)0x0A

/* Service ID for Enables the wakeup interrupt of a channel (relevant in sleep mode).  */
#define Gpt_EnableWakeup_SID            (uint8)0x0B

/* Service ID for checking wakeup of channel. */
#define Gpt_CheckWakeup_SID            (uint8)0x0C


/*******************************************************************************
 *                      DET Error Codes                                        *
 *******************************************************************************/
/* DTC of An API service called without module initialization.*/
#define GPT_E_UNINIT                  (uint8)0x0A

/* DTC of An API service called when timer channel is still busy (running). */
#define GPT_E_BUSY                    (uint8)0x0B

/* DTC of An API service for initialization called when already initialized. */
#define GPT_E_ALREADY_INITIALIZED     (uint8)0x0D

/* DTC of An API parameter checking: invalid channel */
#define GPT_E_PARAM_CHANNEL           (uint8)0x14

/* DTC of An API parameter checking: invalid value */
#define GPT_E_PARAM_VALUE             (uint8)0x15

/* DTC of An API parameter checking: invalid pointer */
#define GPT_E_PARAM_POINTER           (uint8)0x16

/* DTC of An API parameter checking: invalid mode */
#define GPT_E_PARAM_MODE              (uint8)0x1F


/*******************************************************************************
 *                              Module Data Types                              *
*******************************************************************************/
/* Numeric ID of a GPT channel */
/* the choice of uint8 depends on the maximum number of GPT channels your application requires. If you're certain that your application won't need more than 255 channels, you can use uint8_t.
 * If you anticipate needing more than 255 channels, you should use uint16_t.*/
typedef uint8 Gpt_ChannelType;


/* Type for reading and setting the timer values (in number of ticks). choose uint64 because The timer register width in Tiva C may extend up to 64 bits. */
typedef uint64 Gpt_ValueType;

/* Enum to allow the selection of different power modes. */
/* GPT_MODE_NORMALNormal operation mode of the GPT
 * GPT_MODE_SLEEP Operation for reduced power operation mode. In sleep mode only wakeup capable channels are available.  */
typedef enum{
  GPT_MODE_NORMAL, GPT_MODE_SLEEP
}Gpt_ModeType;

/* Enum for Specifies the behaviour of the timer channel after the target time is reached. */
/* GPT_CH_MODE_ONESHOT  After reaching the target time, the timer stops automatically (timer expired).
 * GPT_CH_MODE_CONTINUOUS  After reaching the target time, the timer continues running with the value "zero" again.*/
typedef enum{
   GPT_CH_MODE_CONTINUOUS, GPT_CH_MODE_ONESHOT
}Gpt_ChannelMode;

typedef enum
{
  INITIALIZED, RUNNING, STOPPED, EXPIRED
} Gpt_StateType;

typedef enum
{
  GPT_CONTINUOUS,GPT_ONE_SHOTT
} Gpt_RunningMode;

typedef enum
{
  INTERRUPT_OFF, INTERRUPT_ON
} Gpt_InterruptOption;


typedef struct{
  Gpt_ChannelType      GptChannelId;
  Gpt_ModeType         Gpt_ChannelMode;
  Gpt_StateType        Gpt_ChannelState;
  Gpt_ValueType        GptChannelTickFrequency;
  Gpt_ValueType        GptChannelTickValueMax;
  Gpt_InterruptOption  Gpt_EnableChannelNotification;
  Gpt_RunningMode      ChannelMode;
  void             (*GptNotifcation)(void);
}Gpt_ConfigChannel;

typedef struct{
  Gpt_ConfigChannel Gpt_Channels[GPT_CONFIGURED_CHANNLES];
}Gpt_ConfigType;

/*******************************************************************************
 *                 GLOBAL Variable Extern that in GPT_PBcfg                    *
 *******************************************************************************/
extern const Gpt_ConfigType Gpt_ConfigPtr;

/*******************************************************************************
 *                      Function Prototypes                                    *
 *******************************************************************************/

/* Function to Initializes the hardware timer module. */
void Gpt_init (
        const Gpt_ConfigType* ConfigPtr
);

#if (GPT_DEINIT_API==STD_ON);
/* Function Deinitializes all hardware timer channels.*/
void Gpt_DeInit(void);
#endif

#if(GPT_VERSION_INFO_API==STD_ON)
/* Function to Returns the version information of GPT module*/
void Gpt_GetVersionInfo(
        Std_VersionInfoType* VersionInfoPtr
);
#endif

#if(GPT_TIME_ELAPSED_API==STD_ON)
/* Function to Returns the time already elapsed.*/
Gpt_ValueType Gpt_GetTimeElapsed(
        Gpt_ChannelType Channel
);
#endif

#if(GPT_TIME_REMAINING_API==STD_ON)
/* Function to Returns the time remaining until the target time is reached. */
Gpt_ValueType Gpt_GetTimeRemaining(
    Gpt_ChannelType Channel
);
#endif

/* Function to Starts a timer channel. */
void Gpt_StartTimer(
    Gpt_ChannelType Channel,
    Gpt_ValueType Value
);

/* Function to Stops a timer channel. */
void Gpt_StopTimer(
    Gpt_ChannelType Channel
);

#if(GPT_ENABLE_DISABLE_NOTIFICATION_API==STD_ON)
/* Function to Enables the interrupt notification for a channel (relevant in normal mode). */
void Gpt_EnableNotification(
    Gpt_ChannelType Channel
);

/*Disables the interrupt notification for a channel (relevant in normal mode). */
void Gpt_DisableNotification(
    Gpt_ChannelType Channel
);
#endif

#if(GPT_WAKEUP_FUNCTIONALITY_API==STD_ON)

/* Function to Sets the operation mode of the GPT (GPT_MODE_NORMAL /GPT_MODE_SLEEP).*/
void Gpt_SetMode(
    Gpt_ModeType Mode
);

/* Disables the wakeup interrupt of a channel (relevant in sleep mode) */
void Gpt_DisableWakeup(
    Gpt_ChannelType Channel
);

#endif

/*******************************************************************************
 *                       Timers IDs                                           *
*******************************************************************************/
#define GPT_TIMER0_ID       (uint8)0
#define GPT_TIMER1_ID       (uint8)1
#define GPT_TIMER2_ID       (uint8)2
#define GPT_TIMER3_ID       (uint8)3

#define GPT_WTIMER0_ID       (uint8)0
#define GPT_WTIMER1_ID       (uint8)1
#define GPT_WTIMER2_ID       (uint8)2
#define GPT_WTIMER3_ID       (uint8)3
#define GPT_WTIMER4_ID       (uint8)4
#define GPT_WTIMER5_ID       (uint8)5

/* SysTick Timer */
#define SYSTICK_TIMER           (uint8)12

/*******************************************************************************
 *                      GPT Channel Types                                    *
*******************************************************************************/

/*For next Version future Enhancement in next release*/
/* 16/32-bit timers */
#define GPT_TIMER0A        (uint8)0
#define GPT_TIMER0B        (uint8)1
#define GPT_TIMER1A        (uint8)2
#define GPT_TIMER1B        (uint8)3
#define GPT_TIMER2A        (uint8)4
#define GPT_TIMER2B        (uint8)5
#define GPT_TIMER3A        (uint8)6
#define GPT_TIMER3B        (uint8)7

/* 32/64-bit timers */
#define GPT_WIDE_TIMER0A        (uint8)0
#define GPT_WIDE_TIMER0B        (uint8)1
#define GPT_WIDE_TIMER1A        (uint8)2
#define GPT_WIDE_TIMER1B        (uint8)3
#define GPT_WIDE_TIMER2A        (uint8)4
#define GPT_WIDE_TIMER2B        (uint8)5
#define GPT_WIDE_TIMER3A        (uint8)6
#define GPT_WIDE_TIMER3B        (uint8)7
#define GPT_WIDE_TIMER4A        (uint8)8
#define GPT_WIDE_TIMER4B        (uint8)9
#define GPT_WIDE_TIMER5A        (uint8)10
#define GPT_WIDE_TIMER5B        (uint8)11


#endif /* GPT_H_ */
